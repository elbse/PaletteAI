{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQMc4y1GPss0TPpTP4zrZS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J8nyD9yqKwgA","executionInfo":{"status":"ok","timestamp":1761140766063,"user_tz":-480,"elapsed":11781,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"c25cd680-ed4a-4d9c-ace9-94009ff3d7e4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: opencv-python in /usr/local/lib/python3.12/dist-packages (4.12.0.88)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n","Requirement already satisfied: numpy<2.3.0,>=2 in /usr/local/lib/python3.12/dist-packages (from opencv-python) (2.0.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.5.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.60.1)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.5)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n"]}],"source":["import streamlit as st\n","import numpy as np\n","import cv2\n","from sklearn.cluster import KMeans\n","import matplotlib.pyplot as plt\n","import io\n","\n","# Streamlit app settings\n","st.set_page_config(page_title=\"üé® AI Color Palette Generator\", page_icon=\"üé®\", layout=\"centered\")\n","\n","st.title(\"üé® AI Color Palette Generator\")\n","st.write(\"Upload an image and extract its dominant colors using KMeans clustering.\")\n","\n","# Sidebar controls\n","st.sidebar.header(\"Settings\")\n","num_colors = st.sidebar.slider(\"Number of colors\", min_value=3, max_value=10, value=5)\n","st.sidebar.info(\"Move the slider to choose how many dominant colors you want.\")\n","\n","# File uploader\n","uploaded_file = st.file_uploader(\"üì§ Upload an image\", type=[\"jpg\", \"jpeg\", \"png\"])\n","\n","if uploaded_file is not None:\n","    # Read the uploaded image\n","    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)\n","    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)\n","    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","    # Resize for faster processing\n","    resized = cv2.resize(image, (300, 300))\n","    pixels = resized.reshape(-1, 3)\n","\n","    # Run KMeans clustering\n","    kmeans = KMeans(n_clusters=num_colors, random_state=42, n_init=10)\n","    kmeans.fit(pixels)\n","    colors = np.array(kmeans.cluster_centers_, dtype='uint8')\n","\n","    # Display uploaded image\n","    st.image(image, caption=\"üì∏ Uploaded Image\", use_column_width=True)\n","\n","    # Plot color palette\n","    st.subheader(\"üé® Extracted Color Palette\")\n","    fig, ax = plt.subplots(figsize=(8, 2))\n","    for i, color in enumerate(colors):\n","        plt.fill_between([i, i+1], 0, 1, color=color/255)\n","    plt.xlim(0, num_colors)\n","    plt.axis(\"off\")\n","    st.pyplot(fig)\n","\n","    # Display RGB + HEX values\n","    st.subheader(\"üßæ Color Details\")\n","    hex_colors = ['#%02x%02x%02x' % tuple(c) for c in colors]\n","    for i, color in enumerate(colors):\n","        rgb_str = f\"RGB: {tuple(color)}\"\n","        hex_str = f\"HEX: {hex_colors[i]}\"\n","        st.markdown(\n","            f\"<div style='display:flex;align-items:center;'>\"\n","            f\"<div style='width:25px;height:25px;background-color:{hex_colors[i]};border-radius:4px;margin-right:10px;'></div>\"\n","            f\"<span>{rgb_str} | {hex_str}</span></div>\",\n","            unsafe_allow_html=True,\n","        )\n","\n","    # Prepare text file for download\n","    color_data = \"\\n\".join([f\"{i+1}. RGB: {tuple(c)} | HEX: {h}\" for i, (c, h) in enumerate(zip(colors, hex_colors))])\n","    download = io.BytesIO(color_data.encode())\n","    st.download_button(\"üíæ Download Palette as TXT\", data=download, file_name=\"color_palette.txt\", mime=\"text/plain\")\n","\n","else:\n","    st.info(\"‚¨ÜÔ∏è Upload an image to get started.\")\n","\n","\n"]},{"cell_type":"code","source":["!git clone https://github.com/elbse/PalleteAI.git\n","%cd PalleteAI"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2VRNaYzpMBjJ","executionInfo":{"status":"ok","timestamp":1761141373880,"user_tz":-480,"elapsed":603,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"026498d4-5f25-46a8-921b-2c768b824092"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'PalleteAI'...\n","warning: You appear to have cloned an empty repository.\n","/content/PalleteAI\n"]}]},{"cell_type":"code","source":["!ls\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4kbPLV5SNMRP","executionInfo":{"status":"ok","timestamp":1761229036596,"user_tz":-480,"elapsed":137,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"7ab6cf85-5b08-405f-a9ea-579f68415e96"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["sample_data\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoIQP8ssN0Cs","executionInfo":{"status":"ok","timestamp":1761229458661,"user_tz":-480,"elapsed":1594,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"f97555bd-54c7-4014-edca-e5caf5021b80"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!ls /content/drive/MyDrive/Colab\\ Notebooks/\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vlrZ0ijjcTyO","executionInfo":{"status":"ok","timestamp":1761229463715,"user_tz":-480,"elapsed":92,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"15b12e2d-ec1c-4c9c-ccf9-d5770fb3c073"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["'bitcoin_sentiment_analysis (1).ipynb'\t PaletteAI.ipynb\n"," bitcoin_sentiment_analysis.ipynb\t PalleteAI.txt\n","'Copy of PaletteAI.ipynb'\t\t'Rock vs Mine Prediction.ipynb'\n","'Movie Recommendation System.ipynb'\n"]}]},{"cell_type":"code","source":["!jupyter nbconvert --to script \"/content/drive/MyDrive/Colab Notebooks/PaletteAI.ipynb\"\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"koVjfvrxQhC4","executionInfo":{"status":"ok","timestamp":1761229471051,"user_tz":-480,"elapsed":5209,"user":{"displayName":"Charisse Priego","userId":"18394557037378665622"}},"outputId":"1e74f2f5-f30d-4c97-b303-bdbae0595b54"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[NbConvertApp] Converting notebook /content/drive/MyDrive/Colab Notebooks/PaletteAI.ipynb to script\n","[NbConvertApp] Writing 2845 bytes to /content/drive/MyDrive/Colab Notebooks/PaletteAI.txt\n"]}]},{"cell_type":"code","source":["!mv \"/content/drive/MyDrive/Colab Notebooks/PaletteAI.py\" app.py\n"],"metadata":{"id":"MHE7RDYhQmjj"},"execution_count":null,"outputs":[]}]}